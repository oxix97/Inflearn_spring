package study.transactiondemo.service;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.UnexpectedRollbackException;
import study.transactiondemo.domain.propagation.Member;
import study.transactiondemo.repository.LogRepository;
import study.transactiondemo.repository.MemberRepository;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.mockito.BDDMockito.willDoNothing;

@Slf4j
@SpringBootTest
class MemberServiceTest {
    @Autowired
    MemberService memberService;
    @Autowired
    MemberRepository memberRepository;
    @Autowired
    LogRepository logRepository;

    /**
     * @memberService @Transactional: OFF
     * @memberRepository @Transactional: ON
     * @LogRepository @Transactional: ON
     */

    @Nested
    @DisplayName("Transactional OFF")
    class OuterTxOffService{

        @Test
        void outerTxOff_success() {
            //given
            String username = "outerTxOff_success";

            //when
            memberService.join_V1(username);

            //then
            assertTrue(memberRepository.find(username).isPresent());
            assertTrue(logRepository.find(username).isPresent());
        }

        /**
         * @memberService @Transactional: OFF
         * @memberRepository @Transactional: ON
         * @LogRepository @Transactional: ON Exception
         */

        @Test
        void outerTxOff_fail() {
            //given
            String username = "로그예외";

            //when
            assertThrows(RuntimeException.class, () -> memberService.join_V1(username));

            //then
            assertTrue(memberRepository.find(username).isPresent());
            assertTrue(logRepository.find(username).isEmpty());
        }
    }

    @Nested
    @DisplayName("Transactional ON")
    class OuterTxOnService {

        /**
         * @memberService @Transactional: ON
         * @memberRepository @Transactional: OFF
         * @LogRepository @Transactional: OFF
         */

        @Test
        void outerTxOn_success() {
            //given
            String username = "outerTxOn_success";

            //when
            memberService.join_V2(username);

            //then
            assertTrue(memberRepository.find(username).isPresent());
            assertTrue(logRepository.find(username).isPresent());
        }

        /**
         * @memberService @Transactional: ON
         * @memberRepository @Transactional: ON
         * @LogRepository @Transactional: ON
         */

        @Test
        void AllTxOn_success() {
            //given
            String username = "AllTxOn_success";

            //when
            memberService.join_V2(username);

            //then
            assertTrue(memberRepository.find(username).isPresent());
            assertTrue(logRepository.find(username).isPresent());
        }

        /**
         * @memberService @Transactional: ON
         * @memberRepository @Transactional: ON
         * @LogRepository @Transactional: ON Exception
         */

        @Test
        void AllTxOn_fail() {
            //given
            String username = "로그예외";

            //when
            assertThrows(RuntimeException.class, () -> memberService.join_V2(username));

            //then
            assertTrue(memberRepository.find(username).isEmpty());
            assertTrue(logRepository.find(username).isEmpty());
        }

        /**
         * @memberService @Transactional: ON
         * @memberRepository @Transactional: ON
         * @LogRepository @Transactional: ON Exception
         */

        @Test
        void recoverException_fail() {
            //given
            String username = "로그예외";

            //when
            assertThrows(UnexpectedRollbackException.class, () -> memberService.join_V2(username));

            //then
            assertTrue(memberRepository.find(username).isEmpty());
            assertTrue(logRepository.find(username).isEmpty());
        }

        /**
         * @memberService @Transactional: ON
         * @memberRepository @Transactional: ON
         * @LogRepository @Transactional: ON(REQUIRES_NEW) Exception
         */

        @Test
        void recoverException_success() {
            //given
            String username = "로그예외_recoverException_success";

            //when
            memberService.join_V2(username);

            //then
            assertTrue(memberRepository.find(username).isPresent());
            assertTrue(logRepository.find(username).isEmpty());
        }
    }
}
